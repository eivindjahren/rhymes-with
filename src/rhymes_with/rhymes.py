import re

SYLLABLES = [
    re.compile(r)
    for r in [
        "cial$",
        "tia$",
        "cius$",
        "cious$",
        "uiet$",
        "gious$",
        "geous$",
        "priest$",
        "giu$",
        "dge$",
        "ion$",
        "iou$",
        "sia$",
        ".che$",
        ".ched$",
        ".abe$",
        ".ace$",
        ".ade$",
        ".age$",
        ".aged$",
        ".ake$",
        ".ale$",
        ".aled$",
        ".ales$",
        ".ane$",
        ".ame$",
        ".ape$",
        ".are$",
        ".ase$",
        ".ashed$",
        ".asque$",
        ".ate$",
        ".ave$",
        ".azed$",
        ".awe$",
        ".aze$",
        ".aped$",
        ".athe$",
        ".athes$",
        ".ece$",
        ".ese$",
        ".esque$",
        ".esques$",
        ".eze$",
        ".gue$",
        ".ibe$",
        ".ice$",
        ".ide$",
        ".ife$",
        ".ike$",
        ".ile$",
        ".ime$",
        ".ine$",
        ".ipe$",
        ".iped$",
        ".ire$",
        ".ise$",
        ".ished$",
        ".ite$",
        ".ive$",
        ".ize$",
        ".obe$",
        ".ode$",
        ".oke$",
        ".ole$",
        ".ome$",
        ".one$",
        ".ope$",
        ".oque$",
        ".ore$",
        ".ose$",
        ".osque$",
        ".osques$",
        ".ote$",
        ".ove$",
        ".pped$",
        ".sse$",
        ".ssed$",
        ".ste$",
        ".ube$",
        ".uce$",
        ".ude$",
        ".uge$",
        ".uke$",
        ".ule$",
        ".ules$",
        ".uled$",
        ".ume$",
        ".une$",
        ".upe$",
        ".ure$",
        ".use$",
        ".ushed$",
        ".ute$",
        ".ved$",
        ".we$",
        ".wes$",
        ".wed$",
        ".yse$",
        ".yze$",
        ".rse$",
        ".red$",
        ".rce$",
        ".rde$",
        ".ily$",
        ".ely$",
        ".des$",
        ".gged$",
        ".kes$",
        ".ced$",
        ".ked$",
        ".med$",
        ".mes$",
        ".ned$",
        ".[sz]ed$",
        ".nce$",
        ".rles$",
        ".nes$",
        ".pes$",
        ".tes$",
        ".res$",
        ".ves$",
        "ere$",
        "ia$",
        "riet$",
        "dien$",
        "ien$",
        "iet$",
        "iu$",
        "iest$",
        "io$",
        "ii$",
        "ily$",
        ".oala$",
        ".iara$",
        ".ying$",
        ".earest$",
        ".arer$",
        ".aress",
        ".eate$",
        ".eation$",
        "[aeiouym]bl$",
        "[aeiou]{2}k$",
        "^mc$",
        "ism$",
        "^mc$",
        "asm$",
        "([^aeiouy])1l$",
        "[^l]lien$",
        "^coa[dglx].$",
        "[^gq]ua[^auieo]$",
        "dnt$",
    ]
]


def does_rhyme(word1: str, word2: str) -> bool:
    """
    :returns: True iff word1 and word2 either
        matches the same ending syllable or
        at least half the word is exactly the same.
    """
    for p in SYLLABLES:
        match1 = p.search(word1)
        match2 = p.search(word2)
        if match1 and match2:
            return True
    length = len(word1) // 2
    return word1[-length:] == word2[-length:]


def filter_rhymes(word: str, dictionary: [str]) -> [str]:
    """
    :returns: the strings in dictionary that does_rhyme
        with word.
    """
    return filter(lambda w: does_rhyme(word, w) and w != word, dictionary)
